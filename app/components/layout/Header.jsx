"use client";

import { useAuth } from "../../context/AuthContext";
import { useEffect, useState } from "react";
import { useMutation, useQuery } from "@apollo/client/react";
import { useRouter, usePathname } from "next/navigation";
import { LOGOUT } from "@/graphql/auth/mutations";
import {
  AppBar,
  Toolbar,
  Typography,
  Box,
  Avatar,
  Menu,
  MenuItem,
  Divider,
  ListItemIcon,
  IconButton,
  Badge,
} from "@mui/material";
import NotificationsNoneIcon from "@mui/icons-material/NotificationsNone";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import LogoutIcon from "@mui/icons-material/Logout";
import Swal from "sweetalert2";
import ThemeToggle from "../ui/ThemeToggle";
import { useTheme } from "next-themes";
import Brightness4Icon from "@mui/icons-material/Brightness4";
import Brightness7Icon from "@mui/icons-material/Brightness7";

export default function Header() {
  const router = useRouter();
  const { user, logoutContext } = useAuth();
  console.log(user);

  const pathname = usePathname(); // ‚úÖ ‡πÑ‡∏î‡πâ path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "/login", "/dashboard"
  console.log("üìç current path:", pathname);

  const [logout] = useMutation(LOGOUT);

  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);

  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô hydration mismatch
  useEffect(() => setMounted(true), []);
  if (!mounted) return null;

  const pageNameCheck = () => {
    if (pathname.startsWith("/onesqa/dashboard")) return "Dashboard";
    else if (pathname.startsWith("/onesqa/chat")) return "AI Chatbot";
    else if (pathname.startsWith("/onesqa/users")) return "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
    else if (pathname.startsWith("/onesqa/reports")) return "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô";
    else if (pathname.startsWith("/onesqa/settings")) return "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö";
    else if (pathname.startsWith("/onesqa/logs")) return "‡∏£‡∏∞‡∏ö‡∏ö Logs";
    else if (pathname.startsWith("/onesqa/detail")) return "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î";
  };

  const handleClick = (event) => setAnchorEl(event.currentTarget);
  const handleClose = () => setAnchorEl(null);

  const handleProfile = () => {
    console.log("üë§ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå");
    router.push(`/onesqa/detail`);
    handleClose();
  };

  const handleThemeToggle = () => {
    console.log("üåì ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°");
    setTheme(theme === "dark" ? "light" : "dark");
    handleClose();
  };

  const handleLogout = async () => {
    console.log(theme);

    handleClose();
    try {
      if (theme === "dark") {
        const result = await Swal.fire({
          title: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
          text: "‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
          cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
          confirmButtonColor: "#3E8EF7", // ‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡∏≤‡∏ß
          cancelButtonColor: "#d33",
          background: "#2F2F30", // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥
          color: "#fff", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
          titleColor: "#fff", // ‡∏™‡∏µ title ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
          textColor: "#fff", // ‡∏™‡∏µ text ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
        });

        if (result.isConfirmed) {
          // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API logout
          const logoutResult = await logout();
          console.log(logoutResult);

          logoutContext();
          console.log("üö™ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
        }
      } else {
        const result = await Swal.fire({
          title: "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
          text: "‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö",
          icon: "warning",
          showCancelButton: true,
          confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
          cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
          confirmButtonColor: "#3E8EF7", // ‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡∏≤‡∏ß
          cancelButtonColor: "#d33",
        });

        if (result.isConfirmed) {
          // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API logout
          const logoutResult = await logout();
          console.log(logoutResult);

          logoutContext();
          console.log("üö™ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß");
        }
      }
    } catch (error) {
      console.error("‚ùå Logout failed:", error);
    }
  };

  if (pathname.startsWith("/auth")) {
    return (
      <AppBar
        position="static"
        sx={{
          bgcolor: "background.paper", // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß
          color: "background.text",
        }}
      >
        <Toolbar>
          {/* ‡∏£‡∏π‡∏õ‡πÇ‡∏•‡πÇ‡∏Å‡πâ */}
          <Box
            component="img"
            src="/images/logo.png" // ‚úÖ ‡πÉ‡∏™‡πà path ‡∏£‡∏π‡∏õ (‡πÄ‡∏ä‡πà‡∏ô public/logo.png)
            alt="Logo"
            sx={{
              width: 48,
              height: 48,
              mr: 1, // margin ‡∏Ç‡∏ß‡∏≤
              ml: 1,
            }}
          />

          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            ONESQA AI Chatbot
          </Typography>
        </Toolbar>
      </AppBar>
    );
  } else {
    return (
      <AppBar
        position="static"
        sx={{
          bgcolor: "background.paper",
          boxShadow: "0px 1px 3px rgba(0,0,0,0.1)",
          px: 3,
          color: "background.text",
        }}
      >
        <Toolbar sx={{ display: "flex", justifyContent: "space-between" }}>
          {/* ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ */}
          <Typography variant="h6" sx={{ fontWeight: "bold" }}>
            {pageNameCheck()}
          </Typography>

          {/* ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤: ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              gap: 1.5,
            }}
          >
            <IconButton
              sx={{
                color: "#3E8EF7", // üîµ ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
                position: "relative",
              }}
            >
              <Badge
                variant="dot"
                overlap="circular"
                sx={{
                  "& .MuiBadge-dot": {
                    backgroundColor: "#E53935", // üî¥ ‡∏™‡∏µ‡πÅ‡∏î‡∏á
                    width: 10,
                    height: 10,
                    borderRadius: "50%",
                    top: 4,
                    right: 4,
                  },
                }}
              >
                <NotificationsNoneIcon />
              </Badge>
            </IconButton>{" "}
            <Avatar
              alt="User"
              //src="/profile.png"
              sx={{ width: 45, height: 45, borderRadius: "10px" }}
            />
            <Box sx={{ textAlign: "left", lineHeight: 1 }}>
              <Typography variant="body1" sx={{ fontWeight: 600 }}>
                {user?.username}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {user?.role_name}
              </Typography>
            </Box>
            <KeyboardArrowDownIcon
              onClick={handleClick}
              sx={{ color: "gray", cursor: "pointer" }}
            />
          </Box>

          {/* ‚úÖ ‡πÄ‡∏°‡∏ô‡∏π dropdown */}
          <Menu
            anchorEl={anchorEl}
            open={open}
            onClose={handleClose}
            anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
            transformOrigin={{ vertical: "top", horizontal: "right" }}
            PaperProps={{
              elevation: 3,
              sx: {
                borderRadius: 2,
                mt: 1,
                minWidth: 190,
              },
            }}
          >
            {/* ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå */}
            <MenuItem onClick={handleProfile}>
              <ListItemIcon>
                <AccountCircleIcon fontSize="small" sx={{ color: "#3E8EF7" }} />
              </ListItemIcon>
              ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
            </MenuItem>

            {/* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏° */}
            <MenuItem onClick={() => handleThemeToggle()}>
              <ListItemIcon>
                {theme === "dark" ? (
                  <Brightness7Icon fontSize="small" sx={{ color: "#3E8EF7" }} />
                ) : (
                  <Brightness4Icon fontSize="small" sx={{ color: "#3E8EF7" }} />
                )}
              </ListItemIcon>
              ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°
            </MenuItem>

            {/* ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô */}
            <Divider sx={{ my: 0.5 }} />

            {/* ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö */}
            <MenuItem onClick={handleLogout} sx={{ color: "red" }}>
              <ListItemIcon>
                <LogoutIcon fontSize="small" sx={{ color: "red" }} />
              </ListItemIcon>
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </MenuItem>
          </Menu>
        </Toolbar>
      </AppBar>
    );
  }
}
