"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useQuery, useMutation } from "@apollo/client/react";
import {
  Box,
  Typography,
  TextField,
  InputAdornment,
  Select,
  MenuItem,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Chip,
  Switch,
  IconButton,
  Pagination,
  CircularProgress,
} from "@mui/material";
import { GET_USERS } from "@/graphql/user/queries";
import { UPDATE_USER } from "@/graphql/user/mutations";
import SearchIcon from "@mui/icons-material/Search";
import DescriptionIcon from "@mui/icons-material/Description";
import UserTableToolbar from "@/app/components/UserTableToolbar";
import { useTranslations } from 'next-intl';

export default function UserPage() {
  const router = useRouter();
  const t = useTranslations('UserPage');
  const { data: usersData, loading: usersLoading, error: usersError } = useQuery(GET_USERS);
  //console.log(usersData);

  // üîπ state
  const [search, setSearch] = useState("");
  const [roleFilter, setRoleFilter] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  const [statusFilter, setStatusFilter] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  const [page, setPage] = useState(1);
  const rowsPerPage = 5; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

  // ‚úÖ state ‡∏Ç‡∏≠‡∏á users (‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ aiAccess ‡πÅ‡∏ö‡∏ö toggle ‡πÑ‡∏î‡πâ)
  // const [users, setUsers] = useState([
  //   {
  //     id: 1,
  //     name: "John Doe",
  //     email: "john.doe@gmail.com",
  //     role: "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö",
  //     department: "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®",
  //     status: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà",
  //     aiAccess: true,
  //     lastLogin: "2024-01-15 14:30",
  //   },
  //   {
  //     id: 2,
  //     name: "Jane Smith",
  //     email: "jane.smith@gmail.com",
  //     role: "‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å",
  //     department: "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
  //     status: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà",
  //     aiAccess: false,
  //     lastLogin: "2024-01-16 09:20",
  //   },
  //   {
  //     id: 3,
  //     name: "Alex Ray",
  //     email: "alex.ray@gmail.com",
  //     role: "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
  //     department: "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
  //     status: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  //     aiAccess: false,
  //     lastLogin: "2024-01-10 15:45",
  //   },
  //   {
  //     id: 4,
  //     name: "Emma Watson",
  //     email: "emma.watson@gmail.com",
  //     role: "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
  //     department: "‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û",
  //     status: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà",
  //     aiAccess: true,
  //     lastLogin: "2024-02-02 10:00",
  //   },
  //   {
  //     id: 5,
  //     name: "Robert Brown",
  //     email: "robert.brown@gmail.com",
  //     role: "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
  //     department: "‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
  //     status: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  //     aiAccess: false,
  //     lastLogin: "2024-02-01 08:45",
  //   },
  //   {
  //     id: 6,
  //     name: "Lisa Johnson",
  //     email: "lisa.johnson@gmail.com",
  //     role: "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
  //     department: "‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô",
  //     status: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà",
  //     aiAccess: true,
  //     lastLogin: "2024-02-03 13:10",
  //   },
  // ]);

  const [users, setUsers] = useState([]);
  const [updateUser] = useMutation(UPDATE_USER);

  // üß≠ helper ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á ISO ‚Üí ‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
  const formatToThaiDateTime = (isoString) => {
    if (!isoString) return "-";
    try {
      const date = new Date(isoString);
      // ‡πÉ‡∏ä‡πâ Intl.DateTimeFormat ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      const options = {
        timeZone: "Asia/Bangkok",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
      };
      // ‡πÉ‡∏ä‡πâ en-CA ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
      return new Intl.DateTimeFormat("en-CA", options)
        .format(date)
        .replace(",", ""); // ‚úÖ ‡πÄ‡∏ä‡πà‡∏ô 2025-10-03 16:09
    } catch (error) {
      return "-";
    }
  };

  // ‚úÖ useEffect
  useEffect(() => {
    if (usersData?.users) {
      const formattedData =
        usersData.users.map((item) => ({
          id: item?.id,
          name: `${item?.firstname || ""} ${item?.lastname || ""}`,
          email: item?.email || "-",
          role: item?.user_role?.[0]?.role?.role_name || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏",
          department: item?.position || "-",
          //status: item?.ai_access ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
          status: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà",
          aiAccess: !!item?.ai_access,
          lastLogin: formatToThaiDateTime(item?.loginAt), // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á
        })) || [];

      setUsers(formattedData);
    }
  }, [usersData]);

  console.log(users);

  if (usersLoading)
    return (
      <Box sx={{ textAlign: "center", mt: 5 }}>
        <CircularProgress />
        <Typography>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Typography>
      </Box>
    );

  if (usersError)
    return (
      <Typography color="error" sx={{ mt: 5 }}>
        ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      </Typography>
    );

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ toggle ‡∏õ‡∏∏‡πà‡∏°
  const handleToggleAccess = async (id) => {
    // ‡∏´‡∏≤ user ‡∏ó‡∏µ‡πà toggle ‡∏≠‡∏¢‡∏π‡πà
    const targetUser = users.find((u) => u.id === id);
    if (!targetUser) return;

    const newAccess = !targetUser.aiAccess;

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optimistic update)
    setUsers((prev) =>
      prev.map((user) =>
        user.id === id ? { ...user, aiAccess: !user.aiAccess } : user
      )
    );

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ backend ‚Üí ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô:
    // await axios.put(`/api/users/${id}/access`, { aiAccess: !user.aiAccess })
    try {
      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å mutation ‡πÑ‡∏õ backend
      const { data } = await updateUser({
        variables: {
          id, // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö schema
          input: {
            ai_access: newAccess, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ô‡∏µ‡πâ
          },
        },
      });

      console.log("‚úÖ Update success:", data.updateUser);

    } catch (error) {
      console.log(error);
    }
  };

  // üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const filteredUsers = users.filter((user) => {
    const matchesSearch =
      user.name.toLowerCase().includes(search.toLowerCase()) ||
      user.email.toLowerCase().includes(search.toLowerCase());
    const matchesRole = roleFilter === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" || user.role === roleFilter;
    const matchesStatus =
      statusFilter === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" || user.status === statusFilter;

    return matchesSearch && matchesRole && matchesStatus;
  });

  // ‚úÖ ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤
  const paginatedUsers = filteredUsers.slice(
    (page - 1) * rowsPerPage,
    page * rowsPerPage
  );

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const handleChangePage = (event, value) => {
    setPage(value);
  };

  const handleClearFilters = () => {
    setSearch("");
    setRoleFilter("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
    setStatusFilter("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
    console.log("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
  };

  const handleClick = (id) => {
    router.push(
      `/onesqa/users/${id}`
    );
  };

  return (
    <Box sx={{ p: 3 }}>
      <UserTableToolbar
        onRefresh={() => console.log("üîÑ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")}
        onExport={() => console.log("‚¨áÔ∏è ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel")}
        onClearFilters={handleClearFilters}
      />

      <Box 
        sx={{
          border: "1px solid #E5E7EB",
          boxShadow: "0 3px 8px rgba(0,0,0,0.04)",
          borderRadius: 4,
          p: 2,
          bgcolor: "background.paper",
          mb: 2
        }}
      >
        <Typography variant="h6" fontWeight="bold" sx={{ mb: 1 }}>
          {t("filter1")}
        </Typography>
        {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            gap: 2,
          }}
        >
          <TextField
            variant="outlined"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            size="small"
            sx={{ flex: 1 }}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon color="action" />
                </InputAdornment>
              ),
            }}
          />

          <Select
            value={roleFilter}
            onChange={(e) => setRoleFilter(e.target.value)}
            size="small"
          >
            <MenuItem value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MenuItem>
            <MenuItem value="‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö">‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö</MenuItem>
            <MenuItem value="‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà">‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà</MenuItem>
            <MenuItem value="‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å">‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å</MenuItem>
          </Select>

          <Select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            size="small"
          >
            <MenuItem value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</MenuItem>
            <MenuItem value="‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà">‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà</MenuItem>
            <MenuItem value="‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô">‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</MenuItem>
          </Select>
        </Box>
      </Box>
      
      <Box
        sx={{
          border: "1px solid #E5E7EB",
          boxShadow: "0 3px 8px rgba(0,0,0,0.04)",
          borderRadius: 4,
          p: 2,
          bgcolor: "background.paper",
        }}
      >
        {/* üîπ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô */}
        <Typography variant="h6" fontWeight="bold" sx={{ mb: 1 }}>
          {t("title1")}
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {t("subtitle1")}
        </Typography>

        <TableContainer component={Paper} sx={{ borderRadius: 3 }}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>{t("tablecell1")}</TableCell>
                <TableCell>{t("tablecell2")}</TableCell>
                <TableCell>{t("tablecell3")}</TableCell>
                <TableCell>{t("tablecell4")}</TableCell>
                <TableCell>{t("tablecell5")}</TableCell>
                <TableCell>{t("tablecell6")}</TableCell>
                <TableCell>{t("tablecell7")}</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {paginatedUsers.map((user, index) => (
                <TableRow key={index}>
                  <TableCell>
                    <Typography fontWeight="bold">{user.name}</Typography>
                    <Typography variant="body2" color="text.secondary">
                      {user.email}
                    </Typography>
                  </TableCell>

                  <TableCell>
                    <Chip
                      label={user.role}
                      sx={{
                        bgcolor:
                          user.role === "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
                            ? "#FCE4EC" // ‡∏ä‡∏°‡∏û‡∏π
                            : user.role === "‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"
                            ? "#E3F2FD" // ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
                            : "#FFF3E0", // ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
                        color:
                          user.role === "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
                            ? "#D81B60"
                            : user.role === "‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"
                            ? "#1976D2"
                            : "#F57C00",
                        fontWeight: 500,
                      }}
                    />

                  </TableCell>

                  <TableCell>{user.department}</TableCell>

                  <TableCell>
                    <Chip
                      label={user.status}
                      sx={{
                        bgcolor:
                          user.status === "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" ? "#E6F7E6" : "#E0E0E0",
                        color: user.status === "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" ? "green" : "gray",
                        fontWeight: 500,
                      }}
                    />
                  </TableCell>

                  <TableCell>
                    <Switch
                      checked={user.aiAccess}
                      color="primary"
                      onChange={() => handleToggleAccess(user.id)}
                    />
                  </TableCell>

                  <TableCell>{user.lastLogin}</TableCell>

                  <TableCell>
                    <IconButton
                      color="primary"
                      onClick={() => handleClick(user.id)}
                      sx={{
                        "&:hover": { transform: "scale(1.1)" },
                        transition: "transform 0.2s ease-in-out",
                      }}
                    >
                      <DescriptionIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))}

              {/* ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
              {/* {paginatedUsers.length === 0 && (
                <TableRow>
                  <TableCell colSpan={7} align="center" sx={{ py: 4 }}>
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                  </TableCell>
                </TableRow>
              )} */}
            </TableBody>
          </Table>
        </TableContainer>

        {/* üîπ Pagination */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "flex-end",
            mt: 2,
          }}
        >
          <Pagination
            count={Math.ceil(filteredUsers.length / rowsPerPage)}
            page={page}
            onChange={handleChangePage}
            color="primary"
          />
        </Box>
      </Box>
    </Box>
  );
}
