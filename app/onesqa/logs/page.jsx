"use client";

import React, { useState, useEffect } from "react";
import { NetworkStatus } from "@apollo/client";
import { useMutation, useQuery, useApolloClient } from "@apollo/client/react";
import { GET_LOGS } from "@/graphql/log/queries";
import { DELETE_LOGS } from "@/graphql/log/mutations";
import {
  Box,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Select,
  MenuItem,
  Pagination,
  TextField,
  Button,
  Switch,
  CircularProgress,
  useMediaQuery,
} from "@mui/material";
import dayjs from "dayjs"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
import DeleteIcon from "@mui/icons-material/Delete";
import UserTableToolbar from "@/app/components/UserTableToolbar";
import Swal from "sweetalert2";
import { useTheme } from "next-themes";
import { useTranslations } from "next-intl";
import { exportLogsToExcel } from "@/util/exportToExcel";

const mapLogFilterToType = (label) => {
  switch (label) {
    case "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°": return "PROMPT";
    case "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô": return "ALERT";
    case "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model": return "MODEL";
    case "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô": return "PERSONAL";
    case "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô": return "GROUP";
    default: return null; // "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  }
};

const mapTypeToLogFilter = (label) => {
  switch (label) {
    case "PROMPT": return "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°";
    case "ALERT": return "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô";
    case "MODEL": return "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model";
    case "PERSONAL": return "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
    case "GROUP": return "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô";
    default: return null; // "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  }
};

const LogPage = () => {
  const client = useApolloClient();
  const t = useTranslations("LogPage");
  const tInit = useTranslations("Init");
  const tDelete = useTranslations("DeleteAlert"); // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏ö

  const isMobile = useMediaQuery("(max-width:600px)"); // < md ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å
  const isTablet = useMediaQuery("(max-width:1200px)"); // < md ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å

  const [logFilter, setLogFilter] = useState("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [page, setPage] = useState(1);
  const rowsPerPage = 5; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
  const { theme } = useTheme();

  const [logRows, setLogRows] = useState([
    // {
    //   time: "2024-01-15 14:30:25",
    //   name: "‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
    //   topic: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°",
    //   old: "‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
    //   new: "‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
    // },
    // {
    //   time: "2024-01-15 14:25:10",
    //   name: "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß‡∏°‡∏≤‡∏•‡∏µ ‡∏™‡∏ß‡∏¢‡∏°‡∏≤‡∏Å",
    //   topic: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î Tokens ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ô‡∏≤‡∏¢‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ)",
    //   old: "50,000 (ChatGPT 4o)",
    //   new: "100,000 (ChatGPT 4o)",
    // },
    // {
    //   time: "2024-01-15 14:15:30",
    //   name: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å",
    //   topic: "‡∏Å‡∏≥‡∏´‡∏ô‡∏î AI Access",
    //   old: "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï",
    //   new: "‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï",
    // },
    // {
    //   time: "2024-01-15 14:15:30",
    //   name: "‡∏ô‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏±‡∏¢ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å",
    //   topic: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô",
    //   old: (
    //     <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
    //       <span>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</span>
    //       <Switch checked disabled />
    //     </Box>
    //   ),
    //   new: (
    //     <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
    //       <span>‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</span>
    //       <Switch disabled />
    //     </Box>
    //   ),
    // },
  ]);
  const [totalCount, setTotalCount] = useState(0)

  const {
    data: logsData,
    loading: logsLoading,
    error: logsError,
    networkStatus
  } = useQuery(GET_LOGS, {
    fetchPolicy: "cache-and-network",
    notifyOnNetworkStatusChange: true,
    variables: {
      page: page, 
      pageSize: rowsPerPage,
      where: {
        logType: mapLogFilterToType(logFilter),
        startDate: startDate,
        endDate: endDate
      }
    },
  });

  const [deleteLogs] = useMutation(DELETE_LOGS);

  useEffect(() => {
    //console.log(logsData?.logs?.totalCount);
    if (!logsData?.logs?.items.length) {
      setLogRows([]);
      setTotalCount(0);
      
      return;
    } 

    const transformed = logsData.logs.items.map((log) => {
      const formattedTime = dayjs(log.createdAt).format("YYYY-MM-DD HH:mm:ss");

      // ‡πÅ‡∏õ‡∏•‡∏á log_type ‡πÄ‡∏õ‡πá‡∏ô topic
      let topic = mapTypeToLogFilter(log.log_type);

      // ‡πÅ‡∏õ‡∏•‡∏á old/new
      let oldValue = log.old_data;
      let newValue = log.new_data;

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ALERT ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô Switch
      if (log.log_type === "ALERT") {
        oldValue = (
          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <span>{log.old_data}</span>
            <Switch checked={!!log.old_status} disabled />
          </Box>
        );
        newValue = (
          <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <span>{log.new_data}</span>
            <Switch checked={!!log.new_status} disabled />
          </Box>
        );
      }

      // helper ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
      const toApprovalText = (v) => {
        if (v === true || v === 'true' || v === 1 || v === '1') return '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥';
        if (v === false || v === 'false' || v === 0 || v === '0') return '‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥';
        return v == null ? '' : String(v); // ‡∏Å‡∏±‡∏ô null/undefined
      };

      if (log.log_type === 'MODEL' || log.log_type === 'PERSONAL') {
        oldValue = log.old_data + " " + toApprovalText(log.old_status);
        newValue = log.new_data + " " + toApprovalText(log.new_status);
      }

      return {
        time: formattedTime,
        name: log.edit_name,
        topic,
        old: oldValue,
        new: newValue,
      };
    });

    setLogRows(transformed);
    setTotalCount(logsData?.logs?.totalCount)
  }, [logsData]);

  // ‡πÇ‡∏ä‡∏ß‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞ "‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏à‡∏£‡∏¥‡∏á ‡πÜ" (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ data)
  const isInitialLoading =
    networkStatus === NetworkStatus.loading && !logsData;

  // ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô if (logsLoading) return ... ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ isInitialLoading
  if (isInitialLoading) 
    return (
      <Box sx={{ textAlign: "center", mt: 5 }}>
        <CircularProgress />
        <Typography>{tInit("loading")}...</Typography>
      </Box>
    );

  if (logsError)
    return (
      <Typography color="error" sx={{ mt: 5 }}>
        ‚ùå {tInit("error")}
      </Typography>
    );

  //console.log(logsData);
  //console.log(JSON.stringify(logsData.logs, null, 2));
  //console.log(JSON.stringify(logRows, null, 2));
  //console.log(logRows, logsData?.logs?.items.length);
  //console.log(logsData?.logs?.totalCount / rowsPerPage);
  //console.log(totalCount);

  // üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  // const filteredLogs = logRows.filter((log) => {
  //   const matchesLog =
  //     logFilter === "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" || log.topic.includes(logFilter);

  //   // --- ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô record ---
  //   const logDate = new Date(dayjs(log.time).format("YYYY-MM-DD"));

  //   // --- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ startDate / endDate ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô ---
  //   const isAfterStart = startDate ? logDate >= new Date(startDate) : true;
  //   const isBeforeEnd = endDate ? logDate <= new Date(endDate) : true;

  //   // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° filter ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ)
  //   return isAfterStart && isBeforeEnd && matchesLog;
  // });

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const handleChangePage = (event, value) => {
    setPage(value);
  };

  // ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleClearFilters = () => {
    setLogFilter("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    setStartDate(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
    setEndDate(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
    setPage(1);
    console.log("üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° SweetAlert2
  const handleDeleteAll = () => {
    if (theme === "dark") {
      Swal.fire({
        title: tDelete("title1"),
        text: tDelete("text1"),
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        cancelButtonColor: "#3E8EF7",
        confirmButtonText: tDelete("confirm"),
        cancelButtonText: tDelete("cancel"),
        background: "#2F2F30", // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥
        color: "#fff", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
        titleColor: "#fff", // ‡∏™‡∏µ title ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
        textColor: "#fff", // ‡∏™‡∏µ text ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
      }).then(async (result) => {
        if (result.isConfirmed) {
          setLogRows([]); // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          setTotalCount(0);

          try {
            // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å mutation ‡πÑ‡∏õ backend
            const { data } = await deleteLogs();
            console.log("‚úÖ Delete success:", data.deleteLogs);
          } catch (error) {
            console.log(error);
          }

          Swal.fire({
            title: tDelete("title2"),
            text: tDelete("text2"),
            icon: "success",
            confirmButtonColor: "#3E8EF7",
            background: "#2F2F30", // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥
            color: "#fff", // ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
            titleColor: "#fff", // ‡∏™‡∏µ title ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
            textColor: "#fff", // ‡∏™‡∏µ text ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏ß
          });
        }
      });
    } else {
      Swal.fire({
        title: tDelete("title1"),
        text: tDelete("text1"),
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33", // ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        cancelButtonColor: "#3E8EF7",
        confirmButtonText: tDelete("confirm"),
        cancelButtonText: tDelete("cancel"),
      }).then(async (result) => {
        if (result.isConfirmed) {
          setLogRows([]); // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          setTotalCount(0);
          
          try {
            // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å mutation ‡πÑ‡∏õ backend
            const { data } = await deleteLogs();
            console.log("‚úÖ Delete success:", data.deleteLogs);
          } catch (error) {
            console.log(error);
          }

          Swal.fire({
            title: tDelete("title2"),
            text: tDelete("text2"),
            icon: "success",
            confirmButtonColor: "#3E8EF7",
          });
        }
      });
    }
  };

  const handleExportExcel = async () => {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡πà‡∏á variables (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏Ç‡∏≠‡∏á schema)
    const { data } = await client.query({
      query: GET_LOGS,
      fetchPolicy: "network-only",
    });

    //console.log(data);
    //console.log(data?.logs?.items);
    
    const lowRowExcel = data?.logs?.items ?? [];

    const toApprovalText = (v) => {
      if (v === true || v === "true" || v === 1 || v === "1") return "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
      if (v === false || v === "false" || v === 0 || v === "0") return "‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
      return v == null ? "" : String(v);
    };

    const payload = lowRowExcel.map((log) => {
      const time = dayjs(log.createdAt).format("YYYY-MM-DD HH:mm:ss");
      const topic = typeof mapTypeToLogFilter === "function"
        ? mapTypeToLogFilter(log.log_type)
        : log.log_type;

      if (log.log_type === "ALERT") {
        return {
          time,
          name: log.edit_name,
          topic,
          oldData: `${log.old_data ?? ""} ${log.old_status ? "‚úÖ" : "‚ùå"}`,
          newData: `${log.new_data ?? ""} ${log.new_status ? "‚úÖ" : "‚ùå"}`,
        };
      }

      if (log.log_type === "MODEL" || log.log_type === "PERSONAL") {
        return {
          time,
          name: log.edit_name,
          topic,
          oldData: `${log.old_data ?? ""} ${toApprovalText(log.old_status)}`,
          newData: `${log.new_data ?? ""} ${toApprovalText(log.new_status)}`,
        };
      }

      return {
        time,
        name: log.edit_name,
        topic,
        oldData: log.old_data ?? "",
        newData: log.new_data ?? "",
      };
    });

    exportLogsToExcel(payload);
  }

  return (
    <div>
      <Box sx={{ p: isMobile ? 0 : 3 }}>
        <UserTableToolbar
          onRefresh={() => console.log("üîÑ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")}
          onExport={() => handleExportExcel()}
          onClearFilters={handleClearFilters}
        />

        {/* üß© ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        <Box
          sx={{
            border: "1px solid #E5E7EB",
            boxShadow: "0 3px 8px rgba(0,0,0,0.04)",
            borderRadius: 4,
            p: isMobile ? 1.5 : 2,
            bgcolor: "background.paper",
            mb: 2,
          }}
        >
          <Typography variant="h6" fontWeight="bold" sx={{ mb: 1 }}>
            {t("filter1")}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            {t("filter2")}
          </Typography>
          {/* üîπ ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
          <Box
            sx={{
              display: "flex",
              flexDirection: isTablet ? "column" : "row", // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡∏≤‡∏°‡∏à‡∏≠
              alignItems: isTablet ? "flex-start" : "center",
              gap: 2,
            }}
          >
            <Select
              value={logFilter}
              onChange={(e) => {
                setLogFilter(e.target.value)
                setPage(1)
              }}
              size="small"
              sx={{ width: isTablet ? "100%" : "none", flex: 1 }}
            >
              <MenuItem value="‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç">
                ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£ Logs ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
              </MenuItem>
              <MenuItem value="‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°">
                ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
              </MenuItem>
              <MenuItem value="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô">
                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
              </MenuItem>
              <MenuItem value="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model">
                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model
              </MenuItem>
              <MenuItem value="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô">
                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
              </MenuItem>
              <MenuItem value="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô">
                ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Model ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô
              </MenuItem>
            </Select>

            {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */}
            <TextField
              label={t("startDate")}
              type="date"
              value={startDate}
              onChange={(e) => {
                setStartDate(e.target.value)
                setPage(1)
              }}
              size="small"
              sx={{ width: isTablet ? "100%" : 200 }}
              InputLabelProps={{ shrink: true }}
            />

            {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î */}
            <TextField
              label={t("endDate")}
              type="date"
              value={endDate}
              onChange={(e) => {
                setEndDate(e.target.value)
                setPage(1)
              }}
              size="small"
              sx={{ width: isTablet ? "100%" : 200 }}
              InputLabelProps={{ shrink: true }}
            />
          </Box>
        </Box>

        <Box
          elevation={1}
          sx={{
            border: "1px solid #E5E7EB",
            boxShadow: "0 3px 8px rgba(0,0,0,0.04)",
            borderRadius: 3,
            p: isMobile ? 1.5 : 2,
            bgcolor: "background.paper",
          }}
        >
          {/* Header */}
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              flexDirection: isTablet ? "column" : "row", // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡∏≤‡∏°‡∏à‡∏≠
              alignItems: isTablet ? "flex-start" : "center",
              mb: 2,
              gap: 1,
            }}
          >
            <Box>
              <Typography variant="h6" fontWeight={700}>
                {t("table1")}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {t("table2")}
              </Typography>
            </Box>
            <Button
              variant="contained"
              color="error"
              startIcon={<DeleteIcon />}
              sx={{ width: isTablet ? "100%" : "none", borderRadius: 2 }}
              onClick={() => {
                handleDeleteAll()
                setPage(1)
              }}
            >
              {t("button1")}
            </Button>
          </Box>

          {/* Table */}
          <Box
            sx={{
              width: "100%",
              overflowX: "auto", // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÑ‡∏î‡πâ
              overflowY: "hidden",
              maxWidth: isMobile ? "80vw" : isTablet ? "85vw" : "90vw", // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            }}
          >
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow sx={{ bgcolor: "background.default" }}>
                    <TableCell sx={{ fontWeight: 600 }}>
                      {t("tablecell1")}
                    </TableCell>
                    <TableCell sx={{ fontWeight: 600 }}>
                      {t("tablecell2")}
                    </TableCell>
                    <TableCell sx={{ fontWeight: 600 }}>
                      {t("tablecell3")}
                    </TableCell>
                    <TableCell sx={{ fontWeight: 600 }}>
                      {t("tablecell4")}
                    </TableCell>
                    <TableCell sx={{ fontWeight: 600 }}>
                      {t("tablecell5")}
                    </TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {logRows.map((row, i) => (
                    <TableRow key={i}>
                      <TableCell>{row.time}</TableCell>
                      <TableCell>{row.name}</TableCell>
                      <TableCell>{row.topic}</TableCell>
                      <TableCell>{row.old}</TableCell>
                      <TableCell>{row.new}</TableCell>
                    </TableRow>
                  ))}

                  {/* ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
                  {logRows.length === 0 && (
                    <TableRow>
                      <TableCell colSpan={7} align="center" sx={{ py: 4 }}>
                        ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </TableContainer>

            {/* Footer */}
            <Box
              sx={{
                display: "flex",
                justifyContent: "flex-end",
                alignItems: "center",
                mt: 2,
              }}
            >
              <Pagination
                count={Math.ceil(totalCount / rowsPerPage)}
                page={page}
                onChange={handleChangePage}
                color="primary"
              />
            </Box>
          </Box>
        </Box>
      </Box>
    </div>
  );
};

export default LogPage;
